#!/bin/sh

myname="${0##*/}"

tmpdir=""
PathsFile=""
CanCreateIcon=""

# fix echo
echo () { printf %s\\n "$*" ; }

find_executables () {
    # throw errors to /dev/null we only want matches
    find "$HOME" -name 'th[0-9]*[0-9]\.exe' 2>/dev/null
}

# usage: create_runscript path name executable_name
create_runscript () {
    Path="$1"
    Name="$2"
    ExeN="$3"
cat << __SCRIPT__
#!/bin/sh

# runscript for touhou ${Name}

# go to executable directory
cd "$Path" || exit

# run executable
wine th${ExeN}.exe
__SCRIPT__
}

# usage: create_desktopfile path name
create_desktopfile () {
    Path="$1"
    Name="$2"
cat << __DESKTOP__
[Desktop Entry]
Type=Application
Terminal=false
Icon=$Path/Icon_th$Name.png
Exec=$HOME/.local/bin/touhou-$Name
Categories=Game;
Name=Touhou ~ $Name
__DESKTOP__
}

# usage: command | write_to_file "file"
#     write the output of a command into given file
#     the data to write is read from stdin
write_to_file () {
    file="$1"
    filedir="${file%/*}"
    value=$(cat)
    can_w=""
    if [ -e "$file" ] && [ -w "$file" ]; then
        currcontent=$(cat "$file")
        if [ "$currcontent" != "$value" ]; then
            can_w=1
        fi
    elif [ -e "$filedir" ] && [ -w "$filedir" ]; then
        can_w=1
    else
        echo "not writing to file '${file}', writeable contet is already the same"
    fi
    if [ -n "$can_w" ]; then
        [ -n "$DBGOUT" ] && printf '%s\n' "$value"
        [ -z "$DRYRUN" ] && printf '%s\n' "$value" > "$file"
    fi

}

show_usage () {
    printf '%s\n' "Usage: ${myname} [-dnh]"
}

show_help () {
    show_usage
    printf '%s\n' "OPTIONS:"
    printf '    %s' "-d, --debug"
    printf '\t%s\n' "show debug output."
    printf '    %s' "-n, --dry-run"
    printf '\t%s\n' "do not write files."
    printf '    %s' "-h, --help"
    printf '\t%s\n' "show this help message."
    exit 0
}

# arg handling
if [ "$#" -gt 0 ]; then
    while getopts "dnh" o; do case "${o}" in
        d)  DBGOUT=1 ;;
        n)  DRYRUN=1 ;;
        h) show_help ;;
        *) 
            echo "${myname}: unknown flag '${o}'"
            show_usage
            exit 1
            ;;
    esac done
    case "$1" in
        debug|-d|--debug)     DBGOUT=1 ;;
        dryrun|-n|--dry-run)  DRYRUN=1 ;;
        help|-h|--help)      show_help ;;
    esac
    shift

fi

tmppath="/tmp/tuhustp"

if mkdir -p "$tmppath" ; then
    tmpdir="$tmppath"
else
    tmpdir="$HOME"
fi

PathsFile="${tmpdir}/PathsFound"

# check if tool to create icons exists
command -v extresso  > /dev/null && CanCreateIcon=1 || CanCreateIcon=0

# search for executables from home directory
echo "searching for touhou executables"

find_executables > "$PathsFile"
echo "list of found touhou executables written to '$PathsFile'"
echo "the following paths were found:"
cat "$PathsFile"

# number of games found saved to variable
NumPaths=$(wc -l "$PathsFile" | cut -d' ' -f1 )

# start counter
NumLine=1
while [ $NumLine -le "$NumPaths" ]; do
	# cd to dir of nth game found
	cd "$(sed 's/th[0-9]*[0-9].exe$//;'$NumLine'q;d' "$PathsFile")" || exit

	# read the numbers from the exe filename
	TouhouNum=$(echo th*[!e].exe|cut -c 3-|head --bytes -5)

	# check if an additional patched exe exists
	if [ -f th"$TouhouNum"e.exe  ]; then
		# set the name of the additional patched exe for the run script
		TouhouNumE="${TouhouNum}e"
	else
		# set the name of the only exe for the run script
		TouhouNumE=$TouhouNum
	fi

	# create missing icons if the tools are avaible
	if [ ! -f Icon_th"$TouhouNum".png  ]; then
        echo "there is no icon file for $TouhouNum"
		if [ $CanCreateIcon = 1 ]; then
			echo "creating icon for th$TouhouNum"
			wrestool -x -t 14 th"$TouhouNum".exe > out.ico
			icotool -x -o . out.ico
			mv out*.png Icon_th"$TouhouNum".png
			rm out.ico
        else
            echo "missing icons can't be created please install icoutils and re-run"
		fi
	fi

	CurrentDirPath="$(pwd)"
    printf '\n'
	echo "creating runscript for th$TouhouNum"
    RunscriptFile="${HOME}/.local/bin/touhou-${TouhouNum}"
    create_runscript "$CurrentDirPath" "$TouhouNum" "$TouhouNumE" | write_to_file "$RunscriptFile"
    if [ -e "$RunscriptFile" ]; then
        chmod +x "$RunscriptFile"
    fi

    printf '\n'
	echo "creating launcher for th$TouhouNum"
    DesktopFile="${HOME}/.local/share/applications/th${TouhouNum}.desktop"
    create_desktopfile "$CurrentDirPath" "$TouhouNum" | write_to_file "$DesktopFile"

	NumLine=$((NumLine + 1))
	cd "$HOME" || exit
done

cd "$HOME" || exit

rm "$PathsFile"

echo "finished"
